* Yet Another LFE Quick Start
** Purpose of this document
To explain why documentation has to change and suggest solution.
** Problems with Current Quick Guide
Current quick guide http://docs.lfe.io/quick-start/1.html
*** poorly designed structure.
Googling for "writing structure" shows following at the very top:
Written documents should be structured in a logical way, making them easier to
follow.

At the moment It's difficult to follow the current Quick guide.

/Suggestion:/

What about, in the very beginning, giving an overview? E.g.:

In this quick start, we will cover the following:
 * The tools necessary to get going quickly on LFE
 * Creating a new LFE project
 * Looking at LFE code in the REPL and in modules
 * Getting introduced to LFE project conveniences in the ``Makefile``

*** out of date
Perhaps something will be done about it.
*** information in wrong place
QS section 1.1
Note that lfetool supports Erlang R15, R16, and 17.0.
should perhaps be in section 1.2
*** dilemmas
section 1.2
Perhaps we need two separate paths for kerl and pre-built packages?
Or maybe just stick to kerl?
* My Suggestion
** Before we start
   We assume user has no working Erlang system and everything Erlang related
can be uninstalled or deleted.
We assume the user has Linux, OSX or similar.
And uses sudo to install in /usr/local/bin.
We use kerl to install Erlang.
We decide on Erlang R16.
Except lfetool everything is installed in users HOME directory.

** System cleanup
Before we try again lets remove our failed attempts.
remove following:

#+BEGIN_EXAMPLE
rm -rvf ~/.erc/
rm -rvf ~/.kerl/
#+END_EXAMPLE

uninstall erlang if needed

** Install lfetool

#+BEGIN_EXAMPLE
$ curl -L -o ./lfetool https://raw.github.com/lfe/lfetool/stable/lfetool
$ sudo bash lfetool install
$ sudo lfetool -x
$ sudo chown $USER /usr/local/bin/lfetool
#+END_EXAMPLE

** Install other dependencies
Make sure ~/bin is in your $PATH

: $ echo $PATH

should show your ~/bin somewhere in the PATH
TODO: if somebody doesn't understand this convention then what?
Recent Windows refugee might have a problem

*** Install kerl

: $ lfetool install kerl ~/bin

*** Install Erlang

: $  lfetool install erlang R16B03-1 ~/kerl

This installs Erlang in ~/kerl

Next we need to activate our Erlang installation.

: $ . ~/kerl/activate

Now when we run:

: $ kerl status

We should see:

#+BEGIN_EXAMPLE
Available builds:
R16B03-1,R16B03-1
----------
Available installations:
R16B03-1 /home/jacek/kerl
----------
The current active installation is:
/home/jacek/kerl
#+END_EXAMPLE

Also we can add it ot our ~/.bash_profile

: $ echo ". ~/kerl/activate" >> ~/.bash_profile

*** Install rebar

: $ lfetool install rebar

** Create New Project
http://docs.lfe.io/quick-start/2.html

: $  lfetool new library my-test-lib

And see expected error message.

Fix the error in:
~/my-test-lib/src/my-test-lib.lfe
so that the test can pass
replacing:

#+BEGIN_EXAMPLE
(defun my-adder (x y)
  (+ x (+ y 1)))
#+END_EXAMPLE

with:

#+BEGIN_EXAMPLE
(defun my-adder (x y)
  (+ x y))
#+END_EXAMPLE

: $ cd my-test-lib

and run the test again

: $ make check-unit

the test should pass now

* REPL

Now let's try REPL

: $ lfetool repl

You will notice that your terminal prompt '$' will change into '>'
we should see:

#+BEGIN_EXAMPLE
Erlang R16B03-1 (erts-5.10.4) [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]

LFE Shell V5.10.4 (abort with ^G)
>
#+END_EXAMPLE

try your first trivial Lisp code

: > (+ 1 2 3)

should give 6

** Define your own function in REPL
After the prompt > type following and press Enter:

: > (defun boo() (io:format "boo boo boo~n"))

now try typing (boo) after the prompt
and you should get boo printed 3 times in the console.

** Define a function in the source, load and execute it

Define a simple function in the source file
./src/my-test-lib.lfe

#+BEGIN_EXAMPLE
(defun my-substractor (x y)
  (- x y))
#+END_EXAMPLE

load the code in REPL

: > (c "./src/my-test-lib")

and try it

: > (my-test-lib:my-substractor 7 2)

If you get 5 then your LFE installation works.

* Hurray!
