* Yet Another LFE 0.9.0 Quick Start

** Before we start
We assume user has no working Erlang system and everything Erlang related
can be uninstalled or deleted.
We assume the user has Linux, OSX or similar.
We uses sudo to install in /usr/local/bin.
We use kerl to install Erlang.
We decide on Erlang 17.3.
Except lfetool executables are installed in users $HOME directory,
or kerl installation directory.

** System cleanup
Before we try again lets remove our failed attempts.

If $ *kerl status* shows anything installed, we need to delete it.

#+BEGIN_EXAMPLE
$ kerl status
Available builds:
R16B03-1,R16B03-1
----------
Available installations:
R16B03-1 /Users/username/kerl
----------
The current active installation is:
/Users/username/kerl
#+END_EXAMPLE

: $ kerl delete installation ~/kerl
: The installation in /Users/username/kerl has been deleted

: $ kerl delete build R16B03-1
: The R16B03-1 build has been deleted


#+BEGIN_EXAMPLE
$ rm -rvf ~/.erc/
$ rm -rvf ~/.kerl/
#+END_EXAMPLE

Uninstall Erlang if it was installed using binary packages. In this example,
instead using your package system we will use kerl to install
one of the latest versions Erlang.

** Install lfetool
Please note that we use lfetool from
dev-1 branch, so that we can use latest stable LFE.

As lfetool progresses the url below will have to be updated.

#+BEGIN_EXAMPLE
$ curl -L -o ./lfetool https://raw.githubusercontent.com/lfe/lfetool/dev-v1/lfetool
$ sudo bash lfetool install
$ sudo lfetool -x
$ sudo chown $USER /usr/local/bin/lfetool
#+END_EXAMPLE

** Install other dependencies
Make sure ~/bin is in your $PATH

: $ echo $PATH

should show your ~/bin somewhere in the PATH
TODO: if somebody doesn't understand this convention then what?
Recent Windows refugee might have a problem

*** Install kerl

: $ lfetool install kerl ~/bin

*** Install Erlang

: $  lfetool install erlang 17.3 ~/erlang17.3

This installs Erlang in ~/kerl

Next we need to activate our Erlang installation.

: $ . ~/erlang17.3/activate

Now when we run:

: $ kerl status

We should see:

#+BEGIN_EXAMPLE
Available builds:
17.3,17.3
----------
Available installations:
17.3 /home/jacek/erlang17.3
----------
The current active installation is:
/home/jacek/erlang17.3
#+END_EXAMPLE

Also we can add it ot our ~/.bash_profile

: $ echo ". ~/erlang17.3/activate" >> ~/.bash_profile

*** Install rebar

: $ lfetool install rebar

** Create New Project

: $  lfetool new library my-test-lib

And see expected error message.

Fix the error in:
~/my-test-lib/src/my-test-lib.lfe
so that the test can pass
replacing:

#+BEGIN_EXAMPLE
(defun my-adder (x y)
  (+ x (+ y 1)))
#+END_EXAMPLE

with:

#+BEGIN_EXAMPLE
(defun my-adder (x y)
  (+ x y))
#+END_EXAMPLE

: $ cd my-test-lib

and run the test again

: $ make check-unit

the test should pass now

* REPL

Now let's try REPL

: $ lfetool repl

You will notice that your terminal prompt '$' will change into '>'
and you should see:

#+BEGIN_EXAMPLE
Erlang R16B03-1 (erts-5.10.4) [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]

LFE Shell V5.10.4 (abort with ^G)
>
#+END_EXAMPLE

try your first trivial Lisp code

: > (+ 1 2 3)

should give 6

** Define your own function in REPL
After the prompt > type following and press Enter:

: > (defun boo() (io:format "boo boo boo~n"))

now try typing (boo) after the prompt
and you should get boo printed 3 times in the console.

better example might be needed...

** Define a function in the source, load and execute it

Define a simple function in the source file
./src/my-test-lib.lfe

#+BEGIN_EXAMPLE
(defun my-substractor (x y)
  (- x y))
#+END_EXAMPLE

load the code in REPL

: > (c "./src/my-test-lib")

and try it

: > (my-test-lib:my-substractor 7 2)

If you get 5 then your LFE installation works.

* Hurray!

Now it's time to quit

press Ctrl-G

when you see:

: User switch command
:  -->

type *q* and press Enter

That's it.

* Further Reading
LFE documentation http://lfe.io/

* Work in Proggress

/Future Plans:/

In this quick start, we will cover the following:
 * The tools necessary to get going quickly on LFE
 * Creating a new LFE project
 * Looking at LFE code in the REPL and in modules
 * Getting introduced to LFE project conveniences in the ``Makefile``
